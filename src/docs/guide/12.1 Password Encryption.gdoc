By default the plugin uses the SHA-256 message digest algorithm to encrypt passwords. You can customize this with the @grails.plugins.springsecurity.password.algorithm@ attribute as described below. In addition you can increase the security of your passwords by adding a salt, which can be a field of the @UserDetails@ instance, a global static value, or any custom value you want.

[BCrypt|http://secure.wikimedia.org/wikipedia/en/wiki/Bcrypt] is a much more secure alternative to the message digest approaches since it supports a customizable work level which when increased takes more computation time to hash the users' passwords, but also dramatically increases the cost of brute force attacks. Given how easy it is to [use GPUs to crack passwords|http://www.google.com/search?q=gpu+password+cracking], you should definitely consider using BCrypt for new projects and switching to it for existing projects. Note that due to the approach used by BCrypt, you cannot add an additional salt like you can with the message digest algorithms.

Enable BCrypt by using the @'bcrypt'@ value for the @algorithm@ config attribute:

{code}
grails.plugins.springsecurity.password.algorithm = 'bcrypt'
{code}

and optionally changing the number of rekeying rounds (which will affect the time it takes to encrypt passwords), e.g.

{code}
grails.plugins.springsecurity.password.bcrypt.logrounds = 15
{code}

Note that the number of rounds must be between 4 and 31.

The table shows configurable password encryption attributes.

{table}
*Property* | *Default* | *Description*
password.algorithm | 'SHA-256' | passwordEncoder Message Digest algorithm. See [this page|http://java.sun.com/j2se/1.5.0/docs/guide/security/CryptoSpec.html#AppA] for options, or use the value 'bcrypt' to use BCrypt instead.
password.encodeHashAsBase64 | @false@ | If @true@, Base64-encode the hashed password.
password.iterations | 1 | the number of iterations which will be executed on the hashed password/salt.
password.bcrypt.logrounds | 10 | the number of rekeying rounds to use when using BCrypt
{table}
